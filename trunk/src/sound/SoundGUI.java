/**
 * Description of this package.
 */
package sound;

import javax.sound.sampled.*;

/**
 * Swing GUI for (currently) playing audio with basic controls.
 *
 * This GUI presents a simple interface for basic operations with audio files
 * (like playing them, pausing them, and stopping them). The code for generating
 * the GUI is generated: please do not edit it if you don't know exactly what
 * you're doing.
 *
 * Also, a logging facility has been included in this project, which can output
 * log statements to the console as well as to a file. By default, a file named
 * {@code log.log} is created. Check the wiki page titled 'Logging' for more
 * information. To enable logging, include the option {@code -enableLog} when
 * running the {@code jar} file.
 *
 * @author Shardul
 */
public class SoundGUI extends javax.swing.JFrame {

    private static boolean firstTime = true;
    private static boolean logEnabled = false;
    private static boolean userChoice = false;
    private static Clip clip;
    private static final org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(SoundGUI.class);

    /**
     * Inner SwingWorker which handles all audio playing and controls.
     *
     * The audio controlling has been done inside a SwingWorker so as to avoid
     * the GUI freezing when playing audio. Each time the audio is played (from
     * the beginning or from last stop), a new instance of AudioWorker is made
     * and it handles the audio paying efficiently.
     */
    private class AudioWorker extends javax.swing.SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() {
            playAudio();
            return null;
        }
    }

    /**
     * Creates new form SoundGUI
     */
    public SoundGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fc = new javax.swing.JFileChooser();
        start = new javax.swing.JLabel();
        path = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        mainControl = new javax.swing.JPanel();
        pause = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        play = new javax.swing.JButton();
        logo = new javax.swing.JLabel();
        logoDesc = new javax.swing.JLabel();

        fc.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Audio files", "wav", "au", "aiff"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Easy Java Media -- Sound GUI");
        setPreferredSize(new java.awt.Dimension(633, 225));

        start.setText("Choose an audio file to start playing --");

        browse.setText("Browse...");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        mainControl.setVisible(false);

        pause.setText("Pause");
        pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseActionPerformed(evt);
            }
        });

        stop.setText("Stop");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        play.setText("Play");
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainControlLayout = new javax.swing.GroupLayout(mainControl);
        mainControl.setLayout(mainControlLayout);
        mainControlLayout.setHorizontalGroup(
            mainControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainControlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(play)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pause)
                .addGap(154, 154, 154)
                .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mainControlLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {pause, play, stop});

        mainControlLayout.setVerticalGroup(
            mainControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainControlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(play)
                    .addComponent(pause)
                    .addComponent(stop))
                .addContainerGap())
        );

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sound/logo.png"))); // NOI18N
        logo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        logoDesc.setText("Easy Java Media");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(528, 528, 528)
                        .addComponent(browse))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(logoDesc)
                                .addGap(82, 517, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(start)
                                    .addComponent(path, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE)
                                    .addComponent(mainControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(logo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(start)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browse)
                .addGap(19, 19, 19)
                .addComponent(logo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logoDesc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("Swing GUI for playing audio files on the user's system. Audio file playing capability currently implemented with the javax.soud.sampled package.");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //<editor-fold defaultstate="collapsed" desc="Internal method(s)">
    private void playAudio() {
        if (firstTime) {

            logger.info("Clip initializing for the first time.");
            firstTime = false;

            try {

                clip = AudioSystem.getClip();
                clip.open(AudioSystem.getAudioInputStream(java.nio.file.Paths.get(path.getText()).toFile()));
                logger.info("Clip initialized and opened with audio file path.");

                clip.addLineListener(new LineListener() {
                    public void update(LineEvent event) {
                        if ((!userChoice) && (event.getType() == LineEvent.Type.STOP)) {
                            event.getLine().close();
                            firstTime = true;
                            if (logEnabled) {
                                logger.info("Clip stopped at end.");
                            }
                        }
                    }
                });
                logger.info("LineListener added to Clip.");

                clip.start();
                logger.info("Clip started.");

                logger.info("Waiting for Clip to finish...");
                Thread.sleep((long) Sound.getDurationWav(java.nio.file.Paths.get(path.getText()).toFile()));

            } catch (LineUnavailableException | UnsupportedAudioFileException | java.io.IOException | InterruptedException ex) {
                logger.error("An exception occurred!" + ex.toString());
            }
            userChoice = false;
        } else {
            long secPos;
            logger.info("Clip restarted from last pause position.");
            secPos = clip.getMicrosecondPosition();
            clip.start();
            logger.info("Waiting for Clip to finish...");
            try {
                Thread.sleep(((long) Sound.getDurationWav(java.nio.file.Paths.get(path.getText()).toFile())) - (secPos / 1000));
            } catch (InterruptedException ex) {
                logger.error("An exception occurred!" + ex.toString());
            }
        }
    }
    //</editor-fold>

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        fc.setCurrentDirectory(java.nio.file.Paths.get((fc.getCurrentDirectory().getParentFile()).toString() + "\\Music").toFile());
        logger.info("Open File dialog box shown.");
        int returnVal = fc.showOpenDialog(SoundGUI.this);
        java.io.File file;

        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            logger.info("File selected.");
            file = fc.getSelectedFile();
            path.setText(file.toString());
            mainControl.setVisible(true);
            this.setSize(633, 275);
            firstTime = true;
        } else {
            logger.info("File selection cancelled.");
        }
    }//GEN-LAST:event_browseActionPerformed

    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        logger.info("AudioWorker running...");
        (new AudioWorker()).execute();
    }//GEN-LAST:event_playActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        userChoice = true;
        clip.stop();
        clip.setMicrosecondPosition(0);
        logger.info("Clip stopped and rewinded.");
    }//GEN-LAST:event_stopActionPerformed

    private void pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseActionPerformed
        userChoice = true;
        clip.stop();
        logger.info("Clip paused.");
    }//GEN-LAST:event_pauseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SoundGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        if (args != null) {
            for (String s : args) {
                logEnabled = s.equals("-enableLog") ? true : false;
            }
        }
        if (logEnabled) {
            org.apache.log4j.PropertyConfigurator.configure("config.properties");
            logger.info("Program started. Logger available and configured.");

        }

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SoundGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JFileChooser fc;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel logoDesc;
    private javax.swing.JPanel mainControl;
    private static javax.swing.JTextField path;
    private javax.swing.JButton pause;
    private javax.swing.JButton play;
    private javax.swing.JLabel start;
    private javax.swing.JButton stop;
    // End of variables declaration//GEN-END:variables
}