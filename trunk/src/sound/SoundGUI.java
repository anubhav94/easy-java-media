/**
 * Description of this package.
 */
package sound;

import javax.sound.sampled.*;

/**
 * Swing GUI for (currently) playing audio with basic controls.
 *
 * This GUI presents a simple interface for basic operations with audio files
 * (like playing them, pausing them, and stopping them). The code for generating
 * the GUI is generated: please do not edit it if you don't know exactly what
 * you're doing.
 *
 * Also, a logging facility has been included in this project, which can output
 * log statements to the console as well as to a file. By default, a file named
 * {@code log.log} is created. Check the wiki page titled 'Logging' for more
 * information. To enable logging, include the option {@code -enableLog} when
 * running the {@code jar} file.
 *
 * @author Shardul
 */
public class SoundGUI extends javax.swing.JFrame {

    private static boolean firstTime = true;
    private static boolean logEnabled = false;
    private static boolean userChoice = false;
    private static Clip clip;
    private static final org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(SoundGUI.class);

    /**
     * Inner SwingWorker which handles all audio playing and controls.
     *
     * The audio controlling has been done inside a SwingWorker so as to avoid
     * the GUI freezing when playing audio. Each time the audio is played (from
     * the beginning or from last stop), a new instance of AudioWorker is made
     * and it handles the audio paying efficiently.
     */
    private class AudioWorker extends javax.swing.SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() {
            playAudio();
            return null;
        }
    }

    /**
     * Creates new form SoundGUI
     */
    public SoundGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fc = new javax.swing.JFileChooser();
        start = new javax.swing.JLabel();
        path = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        logo = new javax.swing.JLabel();
        logoDesc = new javax.swing.JLabel();
        info = new javax.swing.JPanel();
        songTitle = new javax.swing.JLabel();
        channels = new javax.swing.JLabel();
        frameRate = new javax.swing.JLabel();
        sampleRate = new javax.swing.JLabel();
        sampleSize = new javax.swing.JLabel();
        control = new javax.swing.JPanel();
        play = new javax.swing.JButton();
        pause = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        loop = new javax.swing.JCheckBox();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        browseMI = new javax.swing.JMenuItem();
        exitMI = new javax.swing.JMenuItem();
        options = new javax.swing.JMenu();
        controlMI = new javax.swing.JMenuItem();

        fc.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Audio files", "wav", "au", "aiff"));
        fc.setName("fc"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Easy Java Media -- Sound GUI");
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(550, 263));
        setName("SoundGUI"); // NOI18N

        start.setText("Choose an audio file to start playing:");
        start.setName("start"); // NOI18N

        path.setName("path"); // NOI18N

        browse.setText("Browse...");
        browse.setName("browse"); // NOI18N
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        logo.setName("logo"); // NOI18N

        logoDesc.setText("Easy Java Media");
        logoDesc.setName("logoDesc"); // NOI18N

        info.setName("info"); // NOI18N
        info.setVisible(false);

        songTitle.setText("Audio file:");
        songTitle.setName("songTitle"); // NOI18N

        channels.setText("Channels:");
        channels.setName("channels"); // NOI18N

        frameRate.setText("Frame rate:");
        frameRate.setName("frameRate"); // NOI18N

        sampleRate.setText("Sample rate: ");
        sampleRate.setName("sampleRate"); // NOI18N

        sampleSize.setText("Sample size:");
        sampleSize.setName("sampleSize"); // NOI18N

        javax.swing.GroupLayout infoLayout = new javax.swing.GroupLayout(info);
        info.setLayout(infoLayout);
        infoLayout.setHorizontalGroup(
            infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(frameRate)
                    .addGroup(infoLayout.createSequentialGroup()
                        .addGroup(infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(songTitle)
                            .addComponent(channels))
                        .addGap(75, 75, 75)
                        .addGroup(infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sampleRate)
                            .addComponent(sampleSize))))
                .addContainerGap(107, Short.MAX_VALUE))
        );

        infoLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {channels, frameRate, sampleRate, sampleSize, songTitle});

        infoLayout.setVerticalGroup(
            infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(songTitle)
                    .addComponent(sampleRate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(channels)
                    .addComponent(sampleSize))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(frameRate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        control.setName("control"); // NOI18N
        control.setVisible(false);

        play.setText("Play");
        play.setName("play"); // NOI18N
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });
        control.add(play);

        pause.setText("Pause");
        pause.setName("pause"); // NOI18N
        pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseActionPerformed(evt);
            }
        });
        control.add(pause);

        stop.setText("Stop");
        stop.setName("stop"); // NOI18N
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });
        control.add(stop);

        loop.setText("Loop");
        loop.setName("loop"); // NOI18N
        loop.setVisible(false);
        loop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loopActionPerformed(evt);
            }
        });
        control.add(loop);

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText("File");
        fileMenu.setName("fileMenu"); // NOI18N

        browseMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_MASK));
        browseMI.setText("Browse...");
        browseMI.setToolTipText("Browse for files");
        browseMI.setName("browseMI"); // NOI18N
        browseMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });
        fileMenu.add(browseMI);

        exitMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMI.setText("Exit");
        exitMI.setName("exitMI"); // NOI18N
        exitMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMIActionPerformed(evt);
            }
        });
        fileMenu.add(exitMI);

        menuBar.add(fileMenu);
        fileMenu.getAccessibleContext().setAccessibleDescription("File menu"); // NOI18N

        options.setText("Options...");
        options.setName("options"); // NOI18N

        controlMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        controlMI.setText("Audio controls");
        controlMI.setName("controlMI"); // NOI18N
        options.add(controlMI);

        menuBar.add(options);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(control, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(path)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(start)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(logo)
                                    .addComponent(logoDesc))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(info, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 126, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(browse)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(start)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(logo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logoDesc))
                    .addComponent(info, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(control, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //<editor-fold defaultstate="collapsed" desc="Internal method(s)">
    private void playAudio() {
        if (firstTime) {

            logger.info("Clip initializing for the first time.");
            firstTime = false;

            try {

                clip = AudioSystem.getClip();
                clip.open(AudioSystem.getAudioInputStream(java.nio.file.Paths.get(path.getText()).toFile()));

                showAudioInfo();

                logger.info("Clip initialized and opened with audio file path.");

                clip.addLineListener(new LineListener() {
                    public void update(LineEvent event) {
                        if ((!userChoice) && (event.getType() == LineEvent.Type.STOP)) {
                            ((Clip) event.getLine()).setMicrosecondPosition(0);
                            event.getLine().close();
                            firstTime = true;
                            if (logEnabled) {
                                logger.info("Clip stopped at end.");
                            }
                        }
                    }
                });
                logger.info("LineListener added to Clip.");

                clip.start();
                logger.info("Clip started.");

                logger.info("Waiting for Clip to finish...");

            } catch (LineUnavailableException | UnsupportedAudioFileException | java.io.IOException ex) {
                logger.error("An exception occurred!" + ex.toString());
            } finally {
                userChoice = false;
            }
        } else {
            logger.info("Clip restarted from last pause position.");
            clip.start();
            logger.info("Waiting for Clip to finish...");
        }
    }

    private void showAudioInfo() {
        AudioFormat format = clip.getFormat();
        channels.setText("Channels: " + ((format.getChannels() == 1) ? "Mono (1)" : "Stereo (2)"));
        frameRate.setText("Frame rate: " + format.getFrameRate() + " frames/sec");
        sampleRate.setText("Sample rate: " + format.getSampleRate() + " samples/sec");
        sampleSize.setText("Sample size:" + format.getSampleSizeInBits() + " bits");
    }

    private void showHiddenComponents() {
        control.setVisible(true);
        loop.setVisible(true);
        info.setVisible(true);
    }
    //</editor-fold>

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        fc.setCurrentDirectory(java.nio.file.Paths.get((fc.getCurrentDirectory().getParentFile()).toString() + "\\Music").toFile());
        logger.info("Open File dialog box shown.");
        int returnVal = fc.showOpenDialog(SoundGUI.this);
        java.io.File file;

        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            logger.info("File selected.");
            file = fc.getSelectedFile();
            path.setText(file.toString());
            songTitle.setText("Audio File: " + file.getName());
            this.setSize(600, 330);
            showHiddenComponents();
            firstTime = true;
        } else {
            logger.info("File selection cancelled.");
        }
    }//GEN-LAST:event_browseActionPerformed

    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        logger.info("AudioWorker running...");
        (new AudioWorker()).execute();
    }//GEN-LAST:event_playActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        userChoice = true;
        clip.stop();
        clip.setMicrosecondPosition(0);
        logger.info("Clip stopped and rewinded.");
    }//GEN-LAST:event_stopActionPerformed

    private void pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseActionPerformed
        userChoice = true;
        clip.stop();
        logger.info("Clip paused.");
    }//GEN-LAST:event_pauseActionPerformed

    private void exitMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMIActionPerformed
        clip.stop();
        clip.close();
        logger.info("Exiting application...");
        System.exit(0);
    }//GEN-LAST:event_exitMIActionPerformed

    private void loopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopActionPerformed
        if (loop.isSelected()) {
            clip.setLoopPoints(0, -1);
            clip.loop(Clip.LOOP_CONTINUOUSLY);
        } else {
            clip.loop(0);
        }
    }//GEN-LAST:event_loopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SoundGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        if (args != null) {
            for (String s : args) {
                logEnabled = s.equals("-enableLog") ? true : false;
            }
        }
        if (logEnabled) {
            org.apache.log4j.PropertyConfigurator.configure("config.properties");
            logger.info("Program started. Logger available and configured.");
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SoundGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JMenuItem browseMI;
    private javax.swing.JLabel channels;
    private javax.swing.JPanel control;
    private javax.swing.JMenuItem controlMI;
    private javax.swing.JMenuItem exitMI;
    private javax.swing.JFileChooser fc;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel frameRate;
    private javax.swing.JPanel info;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel logoDesc;
    private javax.swing.JCheckBox loop;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu options;
    private javax.swing.JTextField path;
    private javax.swing.JButton pause;
    private javax.swing.JButton play;
    private javax.swing.JLabel sampleRate;
    private javax.swing.JLabel sampleSize;
    private javax.swing.JLabel songTitle;
    private javax.swing.JLabel start;
    private javax.swing.JButton stop;
    // End of variables declaration//GEN-END:variables
}
